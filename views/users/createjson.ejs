<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : 'Create Json' %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        html, body { height: 100%; }
        body { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); margin: 0; }
        .builder-container { max-width: 100%; }
        .builder-scroll { max-height: 80vh; overflow: auto; }
        .field-row { background: rgba(255,255,255,0.9); border-radius: 10px; padding: 12px; border: 1px solid #eee; }
        .json-preview { white-space: pre-wrap; overflow-y: auto; overflow-x: hidden; background: #0f172a; color: #e2e8f0; border-radius: 10px; padding: 16px; min-height: 160px; }
        .chip { background: rgba(102,126,234,0.15); color: #fff; border: 1px solid rgba(255,255,255,0.2); padding: 4px 10px; border-radius: 999px; font-size: 12px; }
        .sticky-actions { position: sticky; top: 90px; z-index: 2; }
        /* Remove right and bottom extra space on this page */
        .cj-wrapper { margin-left: 260px; padding: 20px 0 0 0; }
        .cj-wrapper.container, .cj-wrapper.container-fluid { padding-right: 0; padding-left: 0; }
        .builder-container { margin-right: 0; }
        .card { margin-bottom: 0; }
        .cj-fluid { margin-left: 260px; padding: 0; width: calc(100% - 300px); }
        .cj-fluid { margin-left: 260px; padding: 0; width: calc(100% - 300px); }

        /* Remove Bootstrap row negative top margin locally */
        .builder-container .row { margin-top: 0 !important; margin-right: 0 !important; }

        /* THEME COLORS (match app gradient) */
        .card-header {
            background: transparent;
            color: inherit;
            border: none;
        }
        .card { 
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255,255,255,0.25);
        }
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
        }
        .btn-primary:hover { filter: brightness(1.05); }
        .btn-success {
            background: linear-gradient(135deg, #00c853 0%, #00b248 100%);
            border: none;
        }
        .btn-success:hover { filter: brightness(1.05); }
        .btn-danger { 
            background: linear-gradient(135deg, #ff6b6b 0%, #f44336 100%);
            border: none;
        }
        .btn-danger:hover { filter: brightness(1.05); }
        .form-control:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102,126,234,0.25);
        }
        .table thead th { color: #4a4f61; }
    </style>
</head>
<body>
    <%- include('../partials/navbar.ejs') %>
    <%- include('../partials/sidebar.ejs') %>

    <div class="container-fluid cj-fluid">
        <div class="row g-4">
            <div class="col-12">
                <div class="builder-container mx-auto">
                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-brackets-curly me-2"></i>Create JSON</h5>
                        <div class="d-flex align-items-center gap-3">
                            <div class="d-flex align-items-center">
                                <label for="outputFormat" class="me-2 mb-0">Output</label>
                                <select id="outputFormat" class="form-select form-select-sm" style="width:160px">
                                    <option value="json" selected>JSON</option>
                                </select>
                            </div>
                            <span class="chip">Build JSON by adding fields</span>
                        </div>
                    </div>
                    <div class="card-body builder-scroll">
                        <div class="row g-3 align-items-end mb-3 field-row">
                            <div class="col-md-4">
                                <label class="form-label">Field name</label>
                                <input id="fieldName" class="form-control" placeholder="e.g., name, email, age" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Type</label>
                                <select id="fieldType" class="form-select">
                                    <option value="string">Text</option>
                                    <option value="number">Number</option>
                                    <option value="boolean">Boolean</option>
                                    <option value="email">Email</option>
                                    <option value="date">Date</option>
                                </select>
                            </div>
                            <div class="col-md-4" id="valueContainer">
                                <label class="form-label">Value</label>
                                <input id="fieldValue" class="form-control" placeholder="Enter value" />
                            </div>
                            <div class="col-md-1 d-grid">
                                <button id="addFieldBtn" class="btn btn-primary"><i class="fas fa-plus me-1"></i>Add</button>
                            </div>
                        </div>

                        <div class="table-responsive mb-3">
                            <table class="table table-sm align-middle table-borderless">
                                <thead>
                                    <tr>
                                        <th style="width:30%">Name</th>
                                        <th style="width:20%">Type</th>
                                        <th>Value</th>
                                        <th style="width:80px"></th>
                                    </tr>
                                </thead>
                                <tbody id="fieldsTable"></tbody>
                            </table>
                        </div>

                        <div id="messageBox" class="alert d-none" role="alert"></div>
                        <div class="row g-3">
                            <div class="col-lg-6">
                                <div class="sticky-actions d-flex gap-2 mb-2">
                                    <button id="copyJsonBtn" class="btn btn-outline-light"><i class="fas fa-copy me-1"></i>Copy JSON</button>
                                    <button id="downloadJsonBtn" class="btn btn-success"><i class="fas fa-download me-1"></i>Download</button>
                                    <button id="clearBtn" class="btn btn-danger"><i class="fas fa-trash me-1"></i>Clear All</button>
                                </div>
                                <div class="json-preview" id="jsonPreview">{}</div>
                            </div>
                            <div class="col-lg-6">
                                <div class="alert alert-info" style="margin-top: 3rem;">
                                    Tip: Add fields like name, email, text (string), age (number), or toggle booleans. Email and date will be validated.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const fieldNameEl = document.getElementById('fieldName');
        const fieldTypeEl = document.getElementById('fieldType');
        const fieldValueEl = document.getElementById('fieldValue');
        const valueContainerEl = document.getElementById('valueContainer');
        const addFieldBtn = document.getElementById('addFieldBtn');
        const fieldsTable = document.getElementById('fieldsTable');
        const jsonPreview = document.getElementById('jsonPreview');
        const copyBtn = document.getElementById('copyJsonBtn');
        const downloadBtn = document.getElementById('downloadJsonBtn');
        const clearBtn = document.getElementById('clearBtn');

        const state = { entries: [] };

        function renderPreview() {
            const obj = {};
            state.entries.forEach(({ name, type, value }) => {
                obj[name] = castValue(type, value);
            });
            const arr = [obj];
            jsonPreview.textContent = JSON.stringify(arr, null, 2);
        }

        function castValue(type, value) {
            if (type === 'number') {
                const n = Number(value);
                return isNaN(n) ? null : n;
            }
            if (type === 'boolean') {
                return value === 'true' || value === true;
            }
            if (type === 'date') {
                const d = new Date(value);
                return isNaN(d.getTime()) ? null : d.toISOString();
            }
            if (type === 'email') {
                return String(value || '').trim();
            }
            return String(value ?? '');
        }

        function showMessage(message, type = 'danger'){
            const box = document.getElementById('messageBox');
            box.className = `alert alert-${type}`;
            box.textContent = message;
            box.classList.remove('d-none');
            setTimeout(()=> box.classList.add('d-none'), 2500);
        }

        function validate(name, type, value) {
            if (!name || /\s/.test(name)) return 'Field name is required (no spaces).';
            if (type === 'email') {
                const ok = /[^\s@]+@[^\s@]+\.[^\s@]+/.test(String(value||''));
                if (!ok) return 'Invalid email format.';
            }
            if (type === 'number' && value !== '' && isNaN(Number(value))) return 'Value must be a number.';
            if (type === 'date' && value && isNaN(new Date(value).getTime())) return 'Invalid date.';
            return null;
        }

        function addRow(name, type, value) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td><input class="form-control form-control-sm name-input" value="${name}" /></td>
                <td>
                    <select class="form-select form-select-sm type-select">
                        <option value="string" ${type==='string'?'selected':''}>Text</option>
                        <option value="number" ${type==='number'?'selected':''}>Number</option>
                        <option value="boolean" ${type==='boolean'?'selected':''}>Boolean</option>
                        <option value="email" ${type==='email'?'selected':''}>Email</option>
                        <option value="date" ${type==='date'?'selected':''}>Date</option>
                    </select>
                </td>
                <td class="value-cell"></td>
                <td class="text-end d-inline">
                    <button class="btn btn-sm btn-outline-danger remove-btn"><i class="fas fa-times"></i></button>
                </td>`;

            const valueCell = tr.querySelector('.value-cell');
            function renderValueControl(t, v){
                if (t === 'boolean') {
                    valueCell.innerHTML = `<select class="form-select form-select-sm value-input"><option value="true" ${v==='true'||v===true?'selected':''}>true</option><option value="false" ${v==='false'||v===false?'selected':''}>false</option></select>`;
                } else if (t === 'date') {
                    valueCell.innerHTML = `<input type="date" class="form-control form-control-sm value-input" value="${v || ''}">`;
                } else if (t === 'number') {
                    valueCell.innerHTML = `<input type="number" class="form-control form-control-sm value-input" value="${v || ''}">`;
                } else if (t === 'email') {
                    valueCell.innerHTML = `<input type="email" class="form-control form-control-sm value-input" value="${v || ''}" placeholder="name@example.com">`;
                } else {
                    valueCell.innerHTML = `<input class="form-control form-control-sm value-input" value="${v || ''}">`;
                }
            }
            renderValueControl(type, value);

            const nameInput = tr.querySelector('.name-input');
            const typeSelect = tr.querySelector('.type-select');
            const removeBtn = tr.querySelector('.remove-btn');

            function updateState() {
                const idx = Array.from(fieldsTable.children).indexOf(tr);
                const newName = nameInput.value.trim();
                const newType = typeSelect.value;
                const newValue = tr.querySelector('.value-input').value;
                const err = validate(newName, newType, newValue);
                if (err) { nameInput.classList.add('is-invalid'); }
                else { nameInput.classList.remove('is-invalid'); }
                state.entries[idx] = { name: newName, type: newType, value: newValue };
                renderPreview();
            }

            typeSelect.addEventListener('change', () => { renderValueControl(typeSelect.value, ''); updateState(); });
            tr.addEventListener('input', updateState);
            removeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                const idx = Array.from(fieldsTable.children).indexOf(tr);
                state.entries.splice(idx, 1);
                tr.remove();
                renderPreview();
            });

            fieldsTable.appendChild(tr);
            state.entries.push({ name, type, value });
            renderPreview();
        }

        fieldTypeEl.addEventListener('change', () => {
            const t = fieldTypeEl.value;
            if (t === 'boolean') {
                valueContainerEl.innerHTML = `<label class="form-label">Value</label><select id="fieldValue" class="form-select"><option value="true">true</option><option value="false">false</option></select>`;
            } else if (t === 'date') {
                valueContainerEl.innerHTML = `<label class="form-label">Value</label><input id="fieldValue" type="date" class="form-control" />`;
            } else if (t === 'number') {
                valueContainerEl.innerHTML = `<label class="form-label">Value</label><input id="fieldValue" type="number" class="form-control" placeholder="0" />`;
            } else if (t === 'email') {
                valueContainerEl.innerHTML = `<label class="form-label">Value</label><input id="fieldValue" type="email" class="form-control" placeholder="name@example.com" />`;
            } else {
                valueContainerEl.innerHTML = `<label class="form-label">Value</label><input id="fieldValue" class="form-control" placeholder="Enter value" />`;
            }
        });

        addFieldBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const name = (fieldNameEl.value || '').trim();
            const type = fieldTypeEl.value;
            const value = document.getElementById('fieldValue').value;
            const err = validate(name, type, value);
            if (err) { showMessage(err, 'danger'); return; }
            addRow(name, type, value);
            fieldNameEl.value = '';
            document.getElementById('fieldValue').value = '';
        });

        copyBtn.addEventListener('click', async () => {
            try {
                await navigator.clipboard.writeText(jsonPreview.textContent);
                showMessage('JSON copied to clipboard', 'success');
            } catch {
                showMessage('Copy failed', 'danger');
            }
        });

        downloadBtn.addEventListener('click', () => {
            const blob = new Blob([jsonPreview.textContent], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'data.json';
            a.click();
            URL.revokeObjectURL(url);
        });

        clearBtn.addEventListener('click', () => {
            state.entries = [];
            fieldsTable.innerHTML = '';
            renderPreview();
        });

        renderPreview();
    </script>
</body>
</html>
